---- config
title: Installing GHC and Working with Cabal
height: 84
width: 20
font-size: x-large
auto_size: 1
#skip: 12

---- center

Installing GHC and Working with Cabal

by Christopher :: Reichert

Houston Haskell Users Group

---- i10
== GHC: The Glasgow Haskell Compiler

+Otherwise known as "The Glorious Glasgow Haskell Compilation System".

+A state-of-the-art, open source compiler and interactive environment for the
functional language Haskell.

----
== GHC: The Glasgow Haskell Compiler

GHC has become the de facto compiler for the Haskell language.

Others include:
+* HUGS
* UHC - Utrecth Haskell Compiler
* Jhc

----
== GHC: The Glasgow Haskell Compiler

GHC includes executables:

+* ghc - Compiler
+* GHCi - Interactive Haskell Interpreter

+* runghc - allows you to run Haskell programs without first having to compile them.
+* ghc-pkg - Query and modify the package database. Often used for unregistering.

+* hsc2hs - Preprocessor which can automate writing C bindings.
+* haddock - Haskell documentation generator.

----
== Installing GHC

+ Linux

* Package manager (apt, yum, ..)

+ Windows and OSX

* Haskell Platform: http://www.haskell.org/platform/
+* OSX: `brew install ghc`

+* Latest ghc packages: http://www.haskell.org/ghc/download

---- shell,i10 center

# Installing GHC

sudo apt-get install ghc
ghc --version

# yum install ghc
# brew install ghc
# pacman install ghc

----
== But I Want GHC 7.*.*

+* Debian (and Ubuntu): deb.haskell.org
+* Fedora: ?

+* Windows: http://www.haskell.org/ghc/dist/7.*.*
* OSX: http://www.haskell.org/ghc/dist/7.*.*

+== Source Packages

* Versioned source packages: http://www.haskell.org/ghc/dist/7.*.*

+* Compile it: http://github.com/ghc/ghc

---- shell,i10

# Download ghc pkg of choice
wget http://deb.haskell.org/stable/ghc-7.8.2_7.8.2-7_amd64.deb

# Install via dpkg
sudo dpkg -i ghc-7.8.2_7.8.2-7_amd64.deb

# Add to PATH
ls /opt/ghc/7.8.2/bin
export PATH=/opt/ghc/7.8.2/bin:$PATH

# Test version.
ghc --version

---- haskell,i10

-- Compile test program with newly installed `ghc`.
main :: IO ()
main = putStrLn "Hello, world!";

----
== Compiling and Running a Haskell Program using GHC

+Using runhaskell (runghc)

+* Haskell code slides executed using runghc.

+Load source file into GHCi

+* Prelude> :l Main.hs
+* Very convenient for testing and development.

+Compile to binary

+$ ghc Main.hs

+* Make mode `ghc --make`. GHC will use make mode if no mode flag specified.

---- shell,i10

# Show contents of Main from hhug project
vim Main.hs

---- shell,i10

echo "Running Main.hs with runhaskell"
runhaskell Main.hs

echo -e "\nRunning GHCi"
ghci

echo -e "\nCompiling and executing Main.hs with ghc."
ghc --make Main.hs
./Main

----
== Cabal: Common Architecture for Building Applications and Libraries

+* Packaging system for Haskell software.
+* Provides a standard set of metadata to configure, build and install.
+* Makes distribution and reuse convenient via Hackage.

----
== Installing Cabal

+* Install from package manager or Haskell Platform.

+My development workflow:

$ sudo apt-get cabal-install
+$ cabal install cabal-install
+$ sudo apt-get remove cabal-install
+$ cabal update

+Continue to use local version of cabal-install.

$ export PATH=~/.cabal/bin:$PATH

---- shell,i10n

# Installing Cabal

# sudo apt-get install cabal-install

which cabal
cabal --version

# yum install cabal-install
# brew install cabal-install
# pacman install cabal-install

----
== Cabal Basics

+$ cabal update

+* Updates package index from HackageDB.
+* To be used with caution.
+* Many dependency issues arise from cabal update. Know when to use it.

+Installing packages:

$ cabal install <package>

+* Possible to run into dependency problems quickly installing individual packages.
+* Remove stale packages:

$ ghc-pkg unregister

+$ rm -rf ~/.ghc

---- shell,i10n

# Install pipes globally
cabal install pipes

---- haskell,i10

-- Test the newly installed library.
import Pipes

main :: IO ()
main = putStrLn "Hello, world!";

----
== Issues with Cabal

+* Lots of complaints about Cabal.
+* "Cabal Dependency Hell"
+* Seen as a barrier of entry.

----
== Issues with Cabal

+Haskell Wiki explains that most Cabal issues arise from:

+* Using an ancient version of Cabal, or the package listing.
+* Installing each package separately.
+* Installing packages with incompatible version bounds.
+* Installing packages with external dependencies.
+* Using '--force-reinstalls' or other force switches.

----
== Issues with Cabal

* Cabal compile issues also can arise from actual problems in the code.
+* GHC aggresively attempts cross-module inlining.

----
== Cabal Sanboxes to the Rescue!

+* Cabal sandboxes are like virtualenv.
+* Interum solution to alleviate "Cabal hell"
+* Generally, Work in Cabal sandboxes while in development.

---- shell,i10

# Initialize Cabal Sandbox
cabal sandbox init

+
# Install pipes library into sandbox
cabal install pipes

+
# Use runghc with sandbox
alias runghc='runghc -package-db=.cabal-sandbox/x86_64-linux-ghc-7.8.2-packages.conf.d/ '

---- i10
== Creating a new Cabal project.

+Interactive command line tool to create new project:

$ cabal init

---- shell,i10

# Create a new cabal project interactively.
cabal init

# Configure the new cabal project.
cabal configure

# Inspect the new cabal file. Add pipes package.
vim hhug.cabal

# Check for cabal file errors
cabal check

# Fix the warning from `cabal check`
touch LICENSE

----
== Cabal Dependencies

+* Install all dependencies for a project using the '--dependencies-only' flag.
+* Use '--dry-run' to test installs.
+* Use '--enable-tests' to run tests.

---- shell,i10

# Install all project dependencies.
cabal install --dependencies-only

---- haskell,i10

-- Test that the library was correctly installed into the sandbox.
import Graphics.QML
import Pipes

main :: IO ()
main = putStrLn "Hello, world!";

----
== Compile with Cabal.

* Use `cabal build` to compile the library or executable.

+* Use `cabal install` to test install on system
  --> In a sandbox, this installs to `.cabal-sandbox/bin`.

---- shell,i10

# Build the project.
cabal build

# Install the Cabal project
cabal install

----
== Running the Cabal project

+* Execute directly from `dist/`.
+* Run the cabal project executable using `cabal run`.
+* Load project into REPL using `cabal repl`.

---- shell,i10

# Run the executable directly
./dist/build/hhug/hhug

---- shell,i10

# Run the project directly from Cabal
cabal run

# Load Cabal project in GHCi.
cabal repl

----
== Resolving Cabal Errors

+cabal: Error: some packages failed to install: foo-1.0 failed during the
configure step. The exception was: exit: ExitFailure 1

+* This is often cause by missing libraries or executables.
+* Try running again and scrolling up to see the error message more clearly.
+* Install via cabal or package manager.

+Windows

sh: runProcess: does not exist (No such file or directory)

+* Program cannot find sh.exe which is needed to run ./configure script.
+* Forced to install MSYS or Cygwin shell.

---- i10
== Resolving Dependency Conflicts

+Eventually, you may run into real dependency conflicts.

+Generally happens when installing package foo which depends on bar>=0.5 then
try to install a package with an upper bound on bar==0.4.*

---- i10
== Resolving Dependency Conflicts

Some issue can be fixed.

+$ cabal-dev install category-extras
Resolving dependencies...
cabal: Could not resolve dependencies: trying: category-extras-1.0.2 trying:
representable-functors-3.0.1 trying: mtl-2.1.1/installed-801... trying:
pointed-3.0.2 rejecting: indexed-extras-0.1.1 (conflict: pointed==3.0.2,
indexed-extras => pointed<2.2) rejecting: indexed-extras-0.1
(conflict: mtl==2.1.1/installed-801..., indexed-extras => mtl<2.1)

+Try to unregister and reinstall the offending version:
$ ghc-pkg unregister 'mtl==2.1.1'

+If that doesn't work, try installing a constrained version:
$ cabal install 'mtl == 2.0'

+Sometimes you just have to start over:
$ rm -rf ~/.ghc/

---- shell,i10

# Example of install constrained parsec.
# Try changing this to parsec == 2 to show error msg.
cabal install 'parsec >= 3'

# Check available package versions
cabal list parsec --simple-output

# Check installed versions.
cabal list parsec --installed

----
== Resolving Dependency Conflicts

+When all else fails, try fixing the package manually:

+* cabal unpack
+* Fix issue. Relax version bounds, etc.
+* Use `cabal install -from-source=..` to install patched version.

$ cabal install -from-source='../foo-0.1'

---- shell,i10

cd ../

cabal unpack hsqml-0.3.0.0

cd hsqml-0.3.0.0

echo "Now hack on and fix issue in package."
vim .

cd ../hhug

# Install from your fixed package.
cabal install -from-source=../hsqml-0.3.0.0

----
== Resolving Dependency Conflicts

+Issues in base packages crop up from time to time.

Resolving dependencies...
cabal: dependencies conflict: ghc-6.10.1 requires process ==1.0.1.1 however
process-1.0.1.1 was excluded because ghc-6.10.1 requires process ==1.0.1.0

+`ghc-pkg` unregister to remove stale packages.
$ ghc-pkg unregister --user process-1.0.1.1

+* Use cabal sandboxes to mitigate this.
+* Avoid updating core packages.

----
== Workshop

* Sandbox a new project.
* Generate a new cabal project.
* Create basic Main file
* Add dependency to cabal file: (hsqml, yesod, pipes)
* Install dependencies.
* Build

* Unpack and install a package into a sandbox with `cabal install`.

---- center

THE END

Houston Haskell Users Group

Slides and code: git@github.com:creichert/hhug.git

June 2, 2014
